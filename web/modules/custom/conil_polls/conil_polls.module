<?php

/**
 * @file
 * Contains conil_polls.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\webform\WebformSubmissionForm;
use GuzzleHttp\Exception\ConnectException;

/**
 * Implements hook_mail().
 */
function conil_polls_mail($key, &$message, $params) {
  if ($key == 'send_draft_mail') {
    $message['subject'] = $params['title'];
    $message['body'][] = $params['message'];
  }
}

/**
 * Implements hook_form_alter().
 */
function conil_polls_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'webform_submission_') !== FALSE) {
    $formObject = $form_state->getFormObject();
    if ($formObject instanceof WebformSubmissionForm) {
      $webform = $formObject->getEntity()->getWebform();
      if (!$webform->getThirdPartySetting('conil_polls', 'disabled')) {
        $request = \Drupal::request();
        if (empty($form_state->getValues()) && !empty($request->query->get('data'))) {
          $criptoAes = \Drupal::service('conil_polls.cryptoaes');
          $data = $request->query->get('data');
          $params = $criptoAes->decodeParams($data);
          $form_state->setValues($params);
          $submission = $formObject->getEntity();
          $element_values = array_intersect_key(
            $params,
            $submission->getWebform()->getElementsInitializedFlattenedAndHasValue()
          );
          $submission->setData($element_values + $submission->getData());
          $formObject->setEntity($submission);
          $form_state->setFormObject($formObject);
          $form = $formObject->form($form, $form_state);
        }
        //This if added in order to delete continue later from a webform.
        if ($form_id !== 'webform_submission_incident_form_add_form'){
          $form['actions']['continue_later'] = [
            '#type' => 'submit',
            '#value' => t('Continue later'),
            '#weight' => -99,
            '#attributes' => ['class' => ['secondary']],
            '#submit' => ['conil_polls_continue_later_submit'],
          ];
        }
      }
    }
  }

  if ($form_id === 'webform_settings_submissions_form') {
    $webform = $form_state->getFormObject()->getEntity();
    $form['not_send_draft_mail'] = [
      '#type' => 'details',
      '#title' => t('NOT Send draft email'),
      '#open' => TRUE,
    ];

    $form['not_send_draft_mail']['not_send_draft_email_enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Disallow users to send email with webform temporary data.'),
      '#description' => t('If checked, The link to send the form submission through email will be disabled.'),
      '#default_value' => $webform->getThirdPartySetting('conil_polls', 'disabled'),
    ];

    array_unshift($form['actions']['submit']['#submit'], 'conil_polls_wbform_submission_save_settings_submit');
    $form['#validate'][] = 'conil_polls_wbform_submission_save_settings_validate';
  }
}

/**
 * Implements hook_form_submit().
 */
function conil_polls_continue_later_submit(&$form, FormStateInterface $form_state) {
  $formObject = $form_state->getFormObject();
  $submission = $formObject->getEntity();
  $webformid = $submission->getWebform()->id();
  $form_state->cleanValues();
  $params = $form_state->getValues();
  $criptoAes = \Drupal::service('conil_polls.cryptoaes');
  $data = $criptoAes->encodeParams($params);
  $url = Url::fromRoute('conil_polls.send_draft_form', ['webform' => $webformid, 'data' => $data]);
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_form_submit().
 */
function conil_polls_wbform_submission_save_settings_submit(&$form, FormStateInterface $form_state) {
  $webform = $form_state->getFormObject()->getEntity();
  $value = $form_state->getValue('not_send_draft_email_enabled');
  $webform->setThirdPartySetting('conil_polls', 'disabled', $value);
}

/**
 * Implements hook_form_validate().
 */
function conil_polls_wbform_submission_save_settings_validate(&$form, FormStateInterface $form_state) {
}


/**
 * Implements hook_cron().
 */
function conil_polls_cron() {
  return; // Temporary disabled.
  $state = \Drupal::state();
  $config = \Drupal::config('conil_polls.sync_settings');
  $now = time();
  $last_execution = $state->get('conil_polls_sync_last_execution', 0);
  $last_execution = 0;
  $hour_execution = $config->get('sync_hour');
  $hour_execution = date('H');
  if ((($now - $last_execution) >= 86400) && date('H') == $hour_execution) {
    // Set execution time.
    $state->set('conil_polls_sync_last_execution', $now);

    // @TODO call service.
    $httpClientFactory = \Drupal::service('http_client_factory');
    $logger = \Drupal::service('logger.factory')->get('conil_polls');
    _conil_polls_sync_config($config, $httpClientFactory, $logger);
    _conil_polls_sync_results($config, $httpClientFactory, $logger);
  }
}

/**
 * Call the WS to synchronize polls.
 */
function _conil_polls_sync_config($config, $httpClientFactory, $logger) {
  $params = [];
  try {
    $url = $config->get('endpoint_config_url');
    $client = $httpClientFactory->fromOptions([
      'verify' => $config->get('endpoint_config_ssl'),
      'http_errors' => FALSE,
      'connect_timeout' => 5,
    ]);
    $response = $client->post($url, [
      'auth' => [
        $config->get('endpoint_config_user'),
        $config->get('endpoint_config_pass'),
      ],
      'headers' => [
        'Content-Type' => 'application/json',
      ],
      'body' => Json::encode($params),
    ]);
    if ($response->getStatusCode() == 200) {
      $logger->notice(
        t(
          "[200] The Simia SISS WS post %method with result: %result",
          [
            '%method' => 'config',
            '%result' => $response->getBody(),
          ]
        )
      );
    }
    else {
      $logger->error(
        t(
          "[%status] The service %method has returned status code %status",
          [
            '%method' => 'config',
            '%status' => $response->getStatusCode(),
          ]
        )
      );
    }
  } catch (ConnectException $e) {
    watchdog_exception('conil_polls', $e);
  }
}

/**
 * Call the WS to synchronize poll results.
 */
function _conil_polls_sync_results($config, $httpClientFactory, $logger) {
  $params = [];
  try {
    $url = $config->get('endpoint_results_url');
    $client = $httpClientFactory->fromOptions([
      'verify' => $config->get('endpoint_results_ssl'),
      'http_errors' => FALSE,
      'connect_timeout' => 5,
    ]);
    $response = $client->post($url, [
      'auth' => [
        $config->get('endpoint_results_user'),
        $config->get('endpoint_results_pass'),
      ],
      'headers' => [
        'Content-Type' => 'application/json',
      ],
      'body' => Json::encode($params),
    ]);
    if ($response->getStatusCode() == 200) {
      $logger->notice(
        t(
          "[200] The Simia SISS WS post %method with result: %result",
          [
            '%method' => 'results',
            '%result' => $response->getBody(),
          ]
        )
      );
    }
    else {
      $logger->error(
        t(
          "[%status] The service %method has returned status code %status",
          [
            '%method' => 'results',
            '%status' => $response->getStatusCode(),
          ]
        )
      );
    }
  } catch (ConnectException $e) {
    watchdog_exception('conil_polls', $e);
  }
}
